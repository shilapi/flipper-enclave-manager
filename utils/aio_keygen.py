import os
import time
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import binascii, base64

CERT_KEY_U2F_IV = [0xE1, 0x56, 0xCE, 0x83, 0x98, 0xFA, 0x59, 0x0D, 0x45, 0xEC, 0x1C, 0xEB, 0x34, 0xFC, 0x08, 0xC9]

CERT_PRIVATE_KEY = '' # Your cert private key here, in base64 format

enclave_signature_iv = [
    [0xac, 0x5d, 0x68, 0xb8, 0x79, 0x74, 0xfc, 0x7f, 0x45, 0x02, 0x82, 0xf1, 0x48, 0x7e, 0x75, 0x8a],
    [0x38, 0xe6, 0x6a, 0x90, 0x5e, 0x5b, 0x8a, 0xa6, 0x70, 0x30, 0x04, 0x72, 0xc2, 0x42, 0xea, 0xaf],
    [0x73, 0xd5, 0x8e, 0xfb, 0x0f, 0x4b, 0xa9, 0x79, 0x0f, 0xde, 0x0e, 0x53, 0x44, 0x7d, 0xaa, 0xfd],
    [0x3c, 0x9a, 0xf4, 0x43, 0x2b, 0xfe, 0xea, 0xae, 0x8c, 0xc6, 0xd1, 0x60, 0xd2, 0x96, 0x64, 0xa9],
    [0x10, 0xac, 0x7b, 0x63, 0x03, 0x7f, 0x43, 0x18, 0xec, 0x9d, 0x9c, 0xc4, 0x01, 0xdc, 0x35, 0xa7],
    [0x26, 0x21, 0x64, 0xe6, 0xd0, 0xf2, 0x47, 0x49, 0xdc, 0x36, 0xcd, 0x68, 0x0c, 0x91, 0x03, 0x44],
    [0x7a, 0xbd, 0xce, 0x9c, 0x24, 0x7a, 0x2a, 0xb1, 0x3c, 0x4f, 0x5a, 0x7d, 0x80, 0x3e, 0xfc, 0x0d],
    [0xcd, 0xdd, 0xd3, 0x02, 0x85, 0x65, 0x43, 0x83, 0xf9, 0xac, 0x75, 0x2f, 0x21, 0xef, 0x28, 0x6b],
    [0xab, 0x73, 0x70, 0xe8, 0xe2, 0x56, 0x0f, 0x58, 0xab, 0x29, 0xa5, 0xb1, 0x13, 0x47, 0x5e, 0xe8],
    [0x4f, 0x3c, 0x43, 0x77, 0xde, 0xed, 0x79, 0xa1, 0x8d, 0x4c, 0x1f, 0xfd, 0xdb, 0x96, 0x87, 0x2e],
]

enclave_signature_input = [
    [0x9f, 0x5c, 0xb1, 0x43, 0x17, 0x53, 0x18, 0x8c, 0x66, 0x3d, 0x39, 0x45, 0x90, 0x13, 0xa9, 0xde],
    [0xc5, 0x98, 0xe9, 0x17, 0xb8, 0x97, 0x9e, 0x03, 0x33, 0x14, 0x13, 0x8f, 0xce, 0x74, 0x0d, 0x54],
    [0x34, 0xba, 0x99, 0x59, 0x9f, 0x70, 0x67, 0xe9, 0x09, 0xee, 0x64, 0x0e, 0xb3, 0xba, 0xfb, 0x75],
    [0xdc, 0xfa, 0x6c, 0x9a, 0x6f, 0x0a, 0x3e, 0xdc, 0x42, 0xf6, 0xae, 0x0d, 0x3c, 0xf7, 0x83, 0xaf],
    [0xea, 0x2d, 0xe3, 0x1f, 0x02, 0x99, 0x1a, 0x7e, 0x6d, 0x93, 0x4c, 0xb5, 0x42, 0xf0, 0x7a, 0x9b],
    [0x53, 0x5e, 0x04, 0xa2, 0x49, 0xa0, 0x73, 0x49, 0x56, 0xb0, 0x88, 0x8c, 0x12, 0xa0, 0xe4, 0x18],
    [0x7d, 0xa7, 0xc5, 0x21, 0x7f, 0x12, 0x95, 0xdd, 0x4d, 0x77, 0x01, 0xfa, 0x71, 0x88, 0x2b, 0x7f],
    [0xdc, 0x9b, 0xc5, 0xa7, 0x6b, 0x84, 0x5c, 0x37, 0x7c, 0xec, 0x05, 0xa1, 0x9f, 0x91, 0x17, 0x3b],
    [0xea, 0xcf, 0xd9, 0x9b, 0x86, 0xcd, 0x2b, 0x43, 0x54, 0x45, 0x82, 0xc6, 0xfe, 0x73, 0x1a, 0x1a],
    [0x77, 0xb8, 0x1b, 0x90, 0xb4, 0xb7, 0x32, 0x76, 0x8f, 0x8a, 0x57, 0x06, 0xc7, 0xdd, 0x08, 0x90],
]

def aes256cbc_encrypt(key: bytes, iv: bytes, plaintext: bytes):
    cipher = AES.new(key, AES.MODE_CBC, iv)
    ciphertext = cipher.encrypt(plaintext)

    return ciphertext

def aes256cbc_encrypt_pad(key: bytes, iv: bytes, plaintext: bytes):
    cipher = AES.new(key, AES.MODE_CBC, iv)
    ciphertext = cipher.encrypt(pad(plaintext, AES.block_size))

    return ciphertext

def aes256cbc_decrypt(key: bytes, iv: bytes, ciphertext: bytes):
    cipher = AES.new(key, AES.MODE_CBC, iv)
    plaintext = unpad((cipher.decrypt(ciphertext)), AES.block_size)

    return plaintext

def format_hex_c(hex_values: list[str]) -> str:
    formatted_hex_values_c = []
    for hex_value in hex_values:
        formatted_hex_value_c = ', '.join(f'0x{hex_value[i:i+2]}' for i in range(0, len(hex_value), 2))
        formatted_hex_values_c.append(f"{{{formatted_hex_value_c}}}")
    formatted_output_c = ',\n    '.join(formatted_hex_values_c)
    return formatted_output_c

# gen the raw keys
unencrypted_keys = [os.urandom(32).hex().upper() for _ in range(11)]

master_key: str = unencrypted_keys[0]
encrypted_keys_unencrypted: list[str] = unencrypted_keys[1:]
print(f"Master key:\n{master_key}\n")
print(f"Encrypted keys (unencrypted):\n{encrypted_keys_unencrypted}\n")

# encrypt the keys
encrypted_keys = []
for i in range(len(encrypted_keys_unencrypted)):
    encrypted_keys_unencrypted_bytes = bytes.fromhex(encrypted_keys_unencrypted[i])
    enclave_signature_iv_bytes = bytes(enclave_signature_iv[i])
    encrypted_keys.append(aes256cbc_encrypt(bytes().fromhex(master_key), enclave_signature_iv_bytes, encrypted_keys_unencrypted_bytes).hex().upper())
print(f"Encrypted keys:\n{encrypted_keys}\n")

all_keys = [master_key] + encrypted_keys

# format the keys for flipper-enclave-manager
print(f"All keys in C format:\n{format_hex_c(all_keys)}\n")

# encrypt the signature for hal_crypto
encrypted_signature = []
for i in range(len(enclave_signature_input)):
    enclave_signature_input_bytes = bytes(enclave_signature_input[i])
    enclave_signature_iv_bytes = bytes(enclave_signature_iv[i])
    encrypted_signature.append(aes256cbc_encrypt(bytes().fromhex(encrypted_keys[i]), enclave_signature_iv_bytes, enclave_signature_input_bytes).hex().upper())
print(f"Encrypted signature in C format:\n{format_hex_c(encrypted_signature)}\n")

# genetae the encrypted private key for cert
key = bytes.fromhex(all_keys[2])
iv = bytes(CERT_KEY_U2F_IV)
data = base64.b64decode(CERT_PRIVATE_KEY)
encrypted_data = aes256cbc_encrypt_pad(key, iv, data)
print(f"Encrypted private key for cert:\n{' '.join(encrypted_data.hex().upper()[i:i+2] for i in range(0, len(encrypted_data.hex().upper()), 2))}\n")